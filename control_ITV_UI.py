# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'control_ITV_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import tkinter as tk
import pyeip
import time
import tkinter.font as font

hostname1 = "192.168.1.20"
hostname2 = "192.168.1.21"
hostname3 = "192.168.1.22"
EIP_1 = pyeip.EtherNetIP(hostname1)
EIP_2 = pyeip.EtherNetIP(hostname2)
EIP_3 = pyeip.EtherNetIP(hostname3)
C_A = 1 #defult value
C_B = 1 #defult value
C_C = 1 #defult value
high = 4095
low = 0
ITV_A_Net_Status = False

#function for ITV's

##def connect(num, state):
##    if(state):
##        if(num == 1):
##            try:
##                global EIP_1, C_A
##                EIP_1= pyeip.EtherNetIP(hostname1)
##                C_A = EIP_1.explicit_conn(hostname1)
##            except TimeoutError:
##                C_A = 1
##        elif(num == 2):
##            try:
##                global EIP_2, C_B
##                EIP_2 = pyeip.EtherNetIP(hostname2)
##                C_B = EIP_2.explicit_conn(hostname2)
##            except TimeoutError:
##                C_B= 1
##        elif(num == 3):
##            try:
##                global EIP_3, C_C
##                EIP_3 = pyeip.EtherNetIP(hostname3)
##                C_C = EIP_3.explicit_conn(hostname3)
##            except TimeoutError:
##                C_C = 1
##    else:
##        if(num == 1):
##            C_A = 1
##        elif(num == 2):
##            C_B = 1
##        elif(num == 3):
##            C_C = 1
##
##def update():
##    print(C_A)
##    if C_A != 1:
##        r = C_A.getAttrSingle(0x96, 0x96, 0x03)
##        print(r[1])
##        if 0 == r[0]:
##            print(int.from_bytes(r[1],"little"))
##            if(r[1][-2:] == b'\x00\x00'):
##                pressure = int.from_bytes(r[1],"little") #in counts
##                pressure = pressure / 31.37 #convert to psi
##                pressure = round(pressure, 3)
##                print(pressure)
##                label_1 = tk.Label(master=window, text="Pressure 1(psi): " + str(pressure))
##                label_1['font'] = myFont
##                label_1.grid(row=1, column=1, sticky="nsew")
##            else:
##                label_1 = tk.Label(master=window, text="Pressure 1(psi): ERROR")
##                label_1['font'] = myFont
##                label_1.grid(row=1, column=1, sticky="nsew")
##    else:
##        print("C_A Disconnected")
##
##    if C_B != 1:
##        r = C_B.getAttrSingle(0x96, 0x96, 0x03)
##        print(r[1])
##        if 0 == r[0]:
##            print(int.from_bytes(r[1],"little"))
##            if(r[1][-2:] == b'\x00\x00'):
##                pressure = int.from_bytes(r[1],"little") #in counts
##                pressure = pressure / 31.37 #convert to psi
##                pressure = round(pressure, 3)
##                print(pressure)
##                label_2 = tk.Label(master=window, text="Pressure 2(psi): " + str(pressure))
##                label_2['font'] = myFont
##                label_2.grid(row=2, column=1, sticky="nsew")
##            else:
##                label_2 = tk.Label(master=window, text="Pressure 2(psi): ERROR")
##                label_2['font'] = myFont
##                label_2.grid(row=2, column=1, sticky="nsew")
##    else:
##        print("C_B Disconnected")
##
##    if C_C != 1:
##        r = C_C.getAttrSingle(0x96, 0x96, 0x03)
##        print(r[1])
##        if 0 == r[0]:
##            print(int.from_bytes(r[1],"little"))
##            if(r[1][-2:] == b'\x00\x00'):
##                pressure = int.from_bytes(r[1],"little") #in counts
##                pressure = pressure / 31.37 #convert to psi
##                pressure = round(pressure, 3)
##                print(pressure)
##                label_3 = tk.Label(master=window, text="Pressure 3(psi): " + str(pressure))
##                label_3['font'] = myFont
##                label_3.grid(row=3, column=1, sticky="nsew")
##            else:
##                label_3 = tk.Label(master=window, text="Pressure 3(psi): ERROR")
##                label_3['font'] = myFont
##                label_3.grid(row=3, column=1, sticky="nsew")
##        
##    else:
##        print("C_C Disconnected")
##
##    window.after(1000,update)


class Ui_MainWindow(object):

    high = 4095
    low = 0
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setGeometry(QtCore.QRect(0,0,480,720))
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 0, 693, 421))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_ITV_B = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.label_ITV_B.setObjectName("label_ITV_B")
        self.gridLayout.addWidget(self.label_ITV_B, 0, 2, 1, 1)
        self.label_ITV_C = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.label_ITV_C.setObjectName("label_ITV_C")
        self.gridLayout.addWidget(self.label_ITV_C, 0, 4, 1, 1)
        self.label_ITV_A = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.label_ITV_A.setObjectName("label_ITV_A")
        self.gridLayout.addWidget(self.label_ITV_A, 0, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 5, 1, 1)
        self.btn_exit = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.btn_exit.setObjectName("btn_exit")
        self.gridLayout.addWidget(self.btn_exit, 1, 5, 1, 1)
        self.label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 1, 1, 1)
        self.btn_ON = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.btn_ON.setAutoFillBackground(False)
        self.btn_ON.setObjectName("btn_ON")
        self.gridLayout.addWidget(self.btn_ON, 1, 0, 1, 2)
        self.label_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 3, 1, 1)
        self.btn_OFF = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.btn_OFF.setObjectName("btn_OFF")
        self.gridLayout.addWidget(self.btn_OFF, 1, 2, 1, 2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 720, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # Creating button responses:
        self.btn_ON.clicked.connect(lambda:self.ButtonResponse(self.btn_ON))
        self.btn_OFF.clicked.connect(lambda:self.ButtonResponse(self.btn_OFF))
        self.btn_exit.clicked.connect(lambda:self.ButtonResponse(self.btn_exit))
        
    # Creating checkbox responses:
        self.label_ITV_A.stateChanged.connect(lambda state, x=1:self.btntest(self.label_ITV_A,x))
        self.label_ITV_B.stateChanged.connect(lambda state, x=2:self.btntest(self.label_ITV_B,x))
        self.label_ITV_C.stateChanged.connect(lambda state, x=3:self.btntest(self.label_ITV_C,x))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_ITV_B.setText(_translate("MainWindow", "IVT 2 (psi): "))
        self.label_ITV_C.setText(_translate("MainWindow", "IVT 3 (psi): "))
        self.label_ITV_A.setText(_translate("MainWindow", "IVT 1 (psi): "))
        self.label_3.setText(_translate("MainWindow", "No Connection"))
        self.btn_exit.setText(_translate("MainWindow", "QUIT"))
        self.label.setText(_translate("MainWindow", "No Connection"))
        self.btn_ON.setText(_translate("MainWindow", "HIGH"))
        self.label_2.setText(_translate("MainWindow", "No Connection"))
        self.btn_OFF.setText(_translate("MainWindow", "LOW"))

    def test(self):
        print("Nice")

    def btntest(self,b,x):
        if x == 1:
            print(str(x))
            if b.isChecked() == True:
                print(b.text()+" is checked")
                self.label_ITV_A.setText("ITV 1 is ON!")
            else:
                print(b.text()+" is not checked")
                self.label_ITV_A.setText("ITV 1 is OFF!")
        elif x == 2:
            print(str(x))
            if b.isChecked() == True:
                print(b.text()+" is checked")
                self.label_ITV_B.setText("ITV 2 is ON!")
            else:
                print(b.text()+" is not checked")
                self.label_ITV_B.setText("ITV 2 is OFF!")
        elif x == 3:
            print(str(x))
            if b.isChecked() == True:
                print(b.text()+" is checked")
                self.label_ITV_C.setText("ITV 3 is ON!")
            else:
                print(b.text()+" is not checked")
                self.label_ITV_C.setText("ITV 3 is OFF!")

    def ButtonResponse(self,b):
        if b.text() == "HIGH":
            CountVal = 4095
            print(str(CountVal))
        if b.text() == "LOW":
            CountVal = 0
            print(str(CountVal))
        if b.text() == "QUIT":
            print("quitting...")
            sys.exit(app.exec_())

    def CheckResponse(self,c,ITV):
        if c.isChecked() == True and ITV_A_Net_Status == True:
            SetPoint = value
            x = SetPoint.to_bytes(2, "little") #change to bytes
            data = pyeip.struct.pack("BB", x[0], x[1])
            if C_A != 1:
                print("Write to 1")
                r = C_A.setAttrSingle(0x64, 0x64, 0x03, data) #write to ITV
                if r[0] == 0:
                    print("Wrote!")
                else:
                    print("Failed to write")
                r = C_A.getAttrSingle(0x96, 0x96, 0x03)
                print(r[1])
                if 0 == r[0]:
                    print(int.from_bytes(r[1],"little"))
                    if(r[1][-2:] == b'\x00\x00'):
                        pressure = int.from_bytes(r[1],"little") #in counts
                        pressure = pressure / 31.37 #convert to psi
                        pressure = round(pressure, 3)
                        print(pressure)
                        self.label_ITV_A.setText("ITV 1 (psi): " + str(pressure))
                    else:
                        self.label_ITV_A.setText("ITV 1 (psi): Error Detected")
                        
        elif c.isChecked() == True and ITV_A_Net_Status == False:
            print("Attempting to connect...")
            try:
                global EIP_1
                EIP_1= pyeip.EtherNetIP(hostname1)
                C_A = EIP_1.explicit_conn(hostname1)
                ITV_A_Net_Status == True
                print("ITV 1 connected")
            except TimeoutError:
                ITV_A_Net_Status == False
                C_A = 1
        else:
            print("You're kinda SOL")
            if ITV == 1:
                C_A = 1
            elif ITV == 2:
                C_B = 1
            elif ITV == 3:
                C_C = 1

##    
##    def connect(self,b,num):
##        if b.isChecked() == True:
##            if(num == 1):
##                try:
##                    global EIP_1, C_A
##                    EIP_1= pyeip.EtherNetIP(hostname1)
##                    C_A = EIP_1.explicit_conn(hostname1)
##                    print("ITV 1 connected")
##                except TimeoutError:
##                    C_A = 1
##            elif(num == 2):
##                try:
##                    global EIP_2, C_B
##                    EIP_2 = pyeip.EtherNetIP(hostname2)
##                    C_B = EIP_2.explicit_conn(hostname2)
##                    print("ITV 2 connected")
##                except TimeoutError:
##                    C_B= 1
##            elif(num == 3):
##                try:
##                    global EIP_3, C_C
##                    EIP_3 = pyeip.EtherNetIP(hostname3)
##                    C_C = EIP_3.explicit_conn(hostname3)
##                    print("ITV 3 connected")
##                except TimeoutError:
##                    C_C = 1
##        else:
##            if(num == 1):
##                C_A = 1
##            elif(num == 2):
##                C_B = 1
##            elif(num == 3):
##                C_C = 1
##

##    def signal(self,value):
##        print("value " + str(value))
##        global C1_list
##        global C_A, C_B, C_C
##        SetPoint = value
##        x = SetPoint.to_bytes(2, "little") #change to bytes
##        data = pyeip.struct.pack("BB", x[0], x[1])
##        if C_A != 1:
##            print("Write to 1")
##            r = C_A.setAttrSingle(0x64, 0x64, 0x03, data) #write to ITV
##            if r[0] == 0:
##                print("Wrote!")
##            else:
##                print("Failed to write")
##            r = C_A.getAttrSingle(0x96, 0x96, 0x03)
##            print(r[1])
##            if 0 == r[0]:
##                print(int.from_bytes(r[1],"little"))
##                if(r[1][-2:] == b'\x00\x00'):
##                    pressure = int.from_bytes(r[1],"little") #in counts
##                    pressure = pressure / 31.37 #convert to psi
##                    pressure = round(pressure, 3)
##                    print(pressure)
##                    label_1 = tk.Label(master=window, text="Pressure 1(psi): " + str(pressure))
##                    label_1['font'] = myFont
##                    label_1.grid(row=1, column=1, sticky="nsew")
##                else:
##                    label_1 = tk.Label(master=window, text="Pressure 1(psi): ERROR")
##                    label_1['font'] = myFont
##                    label_1.grid(row=1, column=1, sticky="nsew")
##            else:
##                print("Failed to read")
##        if C_B != 1:
##            r = C_B.setAttrSingle(0x64, 0x64, 0x03, data) #write to ITV
##            print("Write to 2")
##            if r[0] == 0:
##                print("Wrote!")
##            else:
##                print("Failed to write")
##            r = C_B.getAttrSingle(0x96, 0x96, 0x03)
##            print(r[1])
##            if 0 == r[0]:
##                print(int.from_bytes(r[1],"little"))
##                if(r[1][-2:] == b'\x00\x00'):
##                    pressure = int.from_bytes(r[1],"little") #in counts
##                    pressure = pressure / 31.37 #convert to psi
##                    pressure = round(pressure, 3)
##                    print(pressure)
##                    label_2 = tk.Label(master=window, text="Pressure 2(psi): " + str(pressure))
##                    label_2['font'] = myFont
##                    label_2.grid(row=2, column=1, sticky="nsew")
##                else:
##                    label_2 = tk.Label(master=window, text="Pressure 2(psi): ERROR")
##                    label_2['font'] = myFont
##                    label_2.grid(row=2, column=1, sticky="nsew")
##            else:
##                print("Failed to read")
##        if C_C != 1:
##            print("Write to 3")
##            r = C_C.setAttrSingle(0x64, 0x64, 0x03, data) #write to ITV
##            if r[0] == 0:
##                print("Wrote!")
##            else:
##                print("Failed to write")
##            r = C_C.getAttrSingle(0x96, 0x96, 0x03)
##            print(r[1])
##            if 0 == r[0]:
##                print(int.from_bytes(r[1],"little"))
##                if(r[1][-2:] == b'\x00\x00'):
##                    pressure = int.from_bytes(r[1],"little") #in counts
##                    pressure = pressure / 31.37 #convert to psi
##                    pressure = round(pressure, 3)
##                    print(pressure)
##                    label_3 = tk.Label(master=window, text="Pressure 3(psi): " + str(pressure))
##                    label_3['font'] = myFont
##                    label_3.grid(row=3, column=1, sticky="nsew")
##                else:
##                    label_3 = tk.Label(master=window, text="Pressure 3(psi): ERROR")
##                    label_3['font'] = myFont
##                    label_3.grid(row=3, column=1, sticky="nsew")
##            else:
##                print("Failed to read")
##        else:
##            print("No ITVs Connected")
##


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
